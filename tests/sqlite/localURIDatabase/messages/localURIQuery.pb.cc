// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localURIQuery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localURIQuery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* localURIQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  localURIQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* requiredIntegerCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  requiredIntegerCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* requiredDoubleCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  requiredDoubleCondition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* comparisonOperator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localURIQuery_2eproto() {
  protobuf_AddDesc_localURIQuery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localURIQuery.proto");
  GOOGLE_CHECK(file != NULL);
  localURIQuery_descriptor_ = file->message_type(0);
  static const int localURIQuery_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, requiredtags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, forbiddentags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, integerconditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, doubleconditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, maximumnumberofresults_),
  };
  localURIQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      localURIQuery_descriptor_,
      localURIQuery::default_instance_,
      localURIQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(localURIQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(localURIQuery));
  requiredIntegerCondition_descriptor_ = file->message_type(1);
  static const int requiredIntegerCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, comparison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, comparisonresultonnull_),
  };
  requiredIntegerCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      requiredIntegerCondition_descriptor_,
      requiredIntegerCondition::default_instance_,
      requiredIntegerCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredIntegerCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(requiredIntegerCondition));
  requiredDoubleCondition_descriptor_ = file->message_type(2);
  static const int requiredDoubleCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, comparison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, comparisonresultonnull_),
  };
  requiredDoubleCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      requiredDoubleCondition_descriptor_,
      requiredDoubleCondition::default_instance_,
      requiredDoubleCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requiredDoubleCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(requiredDoubleCondition));
  comparisonOperator_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localURIQuery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    localURIQuery_descriptor_, &localURIQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    requiredIntegerCondition_descriptor_, &requiredIntegerCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    requiredDoubleCondition_descriptor_, &requiredDoubleCondition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localURIQuery_2eproto() {
  delete localURIQuery::default_instance_;
  delete localURIQuery_reflection_;
  delete requiredIntegerCondition::default_instance_;
  delete requiredIntegerCondition_reflection_;
  delete requiredDoubleCondition::default_instance_;
  delete requiredDoubleCondition_reflection_;
}

void protobuf_AddDesc_localURIQuery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023localURIQuery.proto\"\322\001\n\rlocalURIQuery\022"
    "\024\n\014requiredTags\030\001 \003(\t\022\025\n\rforbiddenTags\030\002"
    " \003(\t\0224\n\021integerConditions\030\003 \003(\0132\031.requir"
    "edIntegerCondition\0222\n\020doubleConditions\030\004"
    " \003(\0132\030.requiredDoubleCondition\022*\n\026maximu"
    "mNumberOfResults\030\005 \001(\r:\n2000000000\"\210\001\n\030r"
    "equiredIntegerCondition\022\r\n\005field\030\001 \002(\t\022\'"
    "\n\ncomparison\030\002 \002(\0162\023.comparisonOperator\022"
    "\r\n\005value\030\003 \002(\005\022%\n\026comparisonResultOnNULL"
    "\030\004 \001(\010:\005false\"\207\001\n\027requiredDoubleConditio"
    "n\022\r\n\005field\030\001 \002(\t\022\'\n\ncomparison\030\002 \002(\0162\023.c"
    "omparisonOperator\022\r\n\005value\030\003 \002(\001\022%\n\026comp"
    "arisonResultOnNULL\030\004 \001(\010:\005false*\202\001\n\022comp"
    "arisonOperator\022\r\n\tLESS_THAN\020\000\022\026\n\022LESS_TH"
    "AN_OR_EQUAL\020\001\022\020\n\014GREATER_THAN\020\002\022\031\n\025GREAT"
    "ER_THAN_OR_EQUAL\020\003\022\t\n\005EQUAL\020\004\022\r\n\tNOT_EQU"
    "AL\020\005", 644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localURIQuery.proto", &protobuf_RegisterTypes);
  localURIQuery::default_instance_ = new localURIQuery();
  requiredIntegerCondition::default_instance_ = new requiredIntegerCondition();
  requiredDoubleCondition::default_instance_ = new requiredDoubleCondition();
  localURIQuery::default_instance_->InitAsDefaultInstance();
  requiredIntegerCondition::default_instance_->InitAsDefaultInstance();
  requiredDoubleCondition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localURIQuery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localURIQuery_2eproto {
  StaticDescriptorInitializer_localURIQuery_2eproto() {
    protobuf_AddDesc_localURIQuery_2eproto();
  }
} static_descriptor_initializer_localURIQuery_2eproto_;
const ::google::protobuf::EnumDescriptor* comparisonOperator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comparisonOperator_descriptor_;
}
bool comparisonOperator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int localURIQuery::kRequiredTagsFieldNumber;
const int localURIQuery::kForbiddenTagsFieldNumber;
const int localURIQuery::kIntegerConditionsFieldNumber;
const int localURIQuery::kDoubleConditionsFieldNumber;
const int localURIQuery::kMaximumNumberOfResultsFieldNumber;
#endif  // !_MSC_VER

localURIQuery::localURIQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void localURIQuery::InitAsDefaultInstance() {
}

localURIQuery::localURIQuery(const localURIQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void localURIQuery::SharedCtor() {
  _cached_size_ = 0;
  maximumnumberofresults_ = 2000000000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

localURIQuery::~localURIQuery() {
  SharedDtor();
}

void localURIQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void localURIQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* localURIQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return localURIQuery_descriptor_;
}

const localURIQuery& localURIQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localURIQuery_2eproto();
  return *default_instance_;
}

localURIQuery* localURIQuery::default_instance_ = NULL;

localURIQuery* localURIQuery::New() const {
  return new localURIQuery;
}

void localURIQuery::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    maximumnumberofresults_ = 2000000000u;
  }
  requiredtags_.Clear();
  forbiddentags_.Clear();
  integerconditions_.Clear();
  doubleconditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool localURIQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string requiredTags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requiredTags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requiredtags(this->requiredtags_size() - 1).data(),
            this->requiredtags(this->requiredtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requiredTags;
        if (input->ExpectTag(18)) goto parse_forbiddenTags;
        break;
      }

      // repeated string forbiddenTags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forbiddenTags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbiddentags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->forbiddentags(this->forbiddentags_size() - 1).data(),
            this->forbiddentags(this->forbiddentags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forbiddenTags;
        if (input->ExpectTag(26)) goto parse_integerConditions;
        break;
      }

      // repeated .requiredIntegerCondition integerConditions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integerConditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integerconditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_integerConditions;
        if (input->ExpectTag(34)) goto parse_doubleConditions;
        break;
      }

      // repeated .requiredDoubleCondition doubleConditions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doubleConditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doubleconditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_doubleConditions;
        if (input->ExpectTag(40)) goto parse_maximumNumberOfResults;
        break;
      }

      // optional uint32 maximumNumberOfResults = 5 [default = 2000000000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumNumberOfResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximumnumberofresults_)));
          set_has_maximumnumberofresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void localURIQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string requiredTags = 1;
  for (int i = 0; i < this->requiredtags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->requiredtags(i).data(), this->requiredtags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->requiredtags(i), output);
  }

  // repeated string forbiddenTags = 2;
  for (int i = 0; i < this->forbiddentags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->forbiddentags(i).data(), this->forbiddentags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->forbiddentags(i), output);
  }

  // repeated .requiredIntegerCondition integerConditions = 3;
  for (int i = 0; i < this->integerconditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->integerconditions(i), output);
  }

  // repeated .requiredDoubleCondition doubleConditions = 4;
  for (int i = 0; i < this->doubleconditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->doubleconditions(i), output);
  }

  // optional uint32 maximumNumberOfResults = 5 [default = 2000000000];
  if (has_maximumnumberofresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maximumnumberofresults(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* localURIQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string requiredTags = 1;
  for (int i = 0; i < this->requiredtags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->requiredtags(i), target);
  }

  // repeated string forbiddenTags = 2;
  for (int i = 0; i < this->forbiddentags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->forbiddentags(i).data(), this->forbiddentags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->forbiddentags(i), target);
  }

  // repeated .requiredIntegerCondition integerConditions = 3;
  for (int i = 0; i < this->integerconditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->integerconditions(i), target);
  }

  // repeated .requiredDoubleCondition doubleConditions = 4;
  for (int i = 0; i < this->doubleconditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->doubleconditions(i), target);
  }

  // optional uint32 maximumNumberOfResults = 5 [default = 2000000000];
  if (has_maximumnumberofresults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maximumnumberofresults(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int localURIQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 maximumNumberOfResults = 5 [default = 2000000000];
    if (has_maximumnumberofresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximumnumberofresults());
    }

  }
  // repeated string requiredTags = 1;
  total_size += 1 * this->requiredtags_size();
  for (int i = 0; i < this->requiredtags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredtags(i));
  }

  // repeated string forbiddenTags = 2;
  total_size += 1 * this->forbiddentags_size();
  for (int i = 0; i < this->forbiddentags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbiddentags(i));
  }

  // repeated .requiredIntegerCondition integerConditions = 3;
  total_size += 1 * this->integerconditions_size();
  for (int i = 0; i < this->integerconditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integerconditions(i));
  }

  // repeated .requiredDoubleCondition doubleConditions = 4;
  total_size += 1 * this->doubleconditions_size();
  for (int i = 0; i < this->doubleconditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doubleconditions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void localURIQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const localURIQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const localURIQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void localURIQuery::MergeFrom(const localURIQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  requiredtags_.MergeFrom(from.requiredtags_);
  forbiddentags_.MergeFrom(from.forbiddentags_);
  integerconditions_.MergeFrom(from.integerconditions_);
  doubleconditions_.MergeFrom(from.doubleconditions_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_maximumnumberofresults()) {
      set_maximumnumberofresults(from.maximumnumberofresults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void localURIQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void localURIQuery::CopyFrom(const localURIQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool localURIQuery::IsInitialized() const {

  for (int i = 0; i < integerconditions_size(); i++) {
    if (!this->integerconditions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < doubleconditions_size(); i++) {
    if (!this->doubleconditions(i).IsInitialized()) return false;
  }
  return true;
}

void localURIQuery::Swap(localURIQuery* other) {
  if (other != this) {
    requiredtags_.Swap(&other->requiredtags_);
    forbiddentags_.Swap(&other->forbiddentags_);
    integerconditions_.Swap(&other->integerconditions_);
    doubleconditions_.Swap(&other->doubleconditions_);
    std::swap(maximumnumberofresults_, other->maximumnumberofresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata localURIQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = localURIQuery_descriptor_;
  metadata.reflection = localURIQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int requiredIntegerCondition::kFieldFieldNumber;
const int requiredIntegerCondition::kComparisonFieldNumber;
const int requiredIntegerCondition::kValueFieldNumber;
const int requiredIntegerCondition::kComparisonResultOnNULLFieldNumber;
#endif  // !_MSC_VER

requiredIntegerCondition::requiredIntegerCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void requiredIntegerCondition::InitAsDefaultInstance() {
}

requiredIntegerCondition::requiredIntegerCondition(const requiredIntegerCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void requiredIntegerCondition::SharedCtor() {
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comparison_ = 0;
  value_ = 0;
  comparisonresultonnull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

requiredIntegerCondition::~requiredIntegerCondition() {
  SharedDtor();
}

void requiredIntegerCondition::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (this != default_instance_) {
  }
}

void requiredIntegerCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* requiredIntegerCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return requiredIntegerCondition_descriptor_;
}

const requiredIntegerCondition& requiredIntegerCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localURIQuery_2eproto();
  return *default_instance_;
}

requiredIntegerCondition* requiredIntegerCondition::default_instance_ = NULL;

requiredIntegerCondition* requiredIntegerCondition::New() const {
  return new requiredIntegerCondition;
}

void requiredIntegerCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    comparison_ = 0;
    value_ = 0;
    comparisonresultonnull_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool requiredIntegerCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comparison;
        break;
      }

      // required .comparisonOperator comparison = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comparison:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comparisonOperator_IsValid(value)) {
            set_comparison(static_cast< ::comparisonOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_comparisonResultOnNULL;
        break;
      }

      // optional bool comparisonResultOnNULL = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comparisonResultOnNULL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comparisonresultonnull_)));
          set_has_comparisonresultonnull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void requiredIntegerCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(), output);
  }

  // required .comparisonOperator comparison = 2;
  if (has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->comparison(), output);
  }

  // required int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // optional bool comparisonResultOnNULL = 4 [default = false];
  if (has_comparisonresultonnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->comparisonresultonnull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* requiredIntegerCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // required .comparisonOperator comparison = 2;
  if (has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->comparison(), target);
  }

  // required int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // optional bool comparisonResultOnNULL = 4 [default = false];
  if (has_comparisonresultonnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->comparisonresultonnull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int requiredIntegerCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // required .comparisonOperator comparison = 2;
    if (has_comparison()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comparison());
    }

    // required int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional bool comparisonResultOnNULL = 4 [default = false];
    if (has_comparisonresultonnull()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void requiredIntegerCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const requiredIntegerCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const requiredIntegerCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void requiredIntegerCondition::MergeFrom(const requiredIntegerCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_comparison()) {
      set_comparison(from.comparison());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_comparisonresultonnull()) {
      set_comparisonresultonnull(from.comparisonresultonnull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void requiredIntegerCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requiredIntegerCondition::CopyFrom(const requiredIntegerCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requiredIntegerCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void requiredIntegerCondition::Swap(requiredIntegerCondition* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(comparison_, other->comparison_);
    std::swap(value_, other->value_);
    std::swap(comparisonresultonnull_, other->comparisonresultonnull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata requiredIntegerCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = requiredIntegerCondition_descriptor_;
  metadata.reflection = requiredIntegerCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int requiredDoubleCondition::kFieldFieldNumber;
const int requiredDoubleCondition::kComparisonFieldNumber;
const int requiredDoubleCondition::kValueFieldNumber;
const int requiredDoubleCondition::kComparisonResultOnNULLFieldNumber;
#endif  // !_MSC_VER

requiredDoubleCondition::requiredDoubleCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void requiredDoubleCondition::InitAsDefaultInstance() {
}

requiredDoubleCondition::requiredDoubleCondition(const requiredDoubleCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void requiredDoubleCondition::SharedCtor() {
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comparison_ = 0;
  value_ = 0;
  comparisonresultonnull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

requiredDoubleCondition::~requiredDoubleCondition() {
  SharedDtor();
}

void requiredDoubleCondition::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (this != default_instance_) {
  }
}

void requiredDoubleCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* requiredDoubleCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return requiredDoubleCondition_descriptor_;
}

const requiredDoubleCondition& requiredDoubleCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localURIQuery_2eproto();
  return *default_instance_;
}

requiredDoubleCondition* requiredDoubleCondition::default_instance_ = NULL;

requiredDoubleCondition* requiredDoubleCondition::New() const {
  return new requiredDoubleCondition;
}

void requiredDoubleCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    comparison_ = 0;
    value_ = 0;
    comparisonresultonnull_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool requiredDoubleCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comparison;
        break;
      }

      // required .comparisonOperator comparison = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comparison:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comparisonOperator_IsValid(value)) {
            set_comparison(static_cast< ::comparisonOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }

      // required double value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_comparisonResultOnNULL;
        break;
      }

      // optional bool comparisonResultOnNULL = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comparisonResultOnNULL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comparisonresultonnull_)));
          set_has_comparisonresultonnull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void requiredDoubleCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(), output);
  }

  // required .comparisonOperator comparison = 2;
  if (has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->comparison(), output);
  }

  // required double value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // optional bool comparisonResultOnNULL = 4 [default = false];
  if (has_comparisonresultonnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->comparisonresultonnull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* requiredDoubleCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // required .comparisonOperator comparison = 2;
  if (has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->comparison(), target);
  }

  // required double value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // optional bool comparisonResultOnNULL = 4 [default = false];
  if (has_comparisonresultonnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->comparisonresultonnull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int requiredDoubleCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // required .comparisonOperator comparison = 2;
    if (has_comparison()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comparison());
    }

    // required double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional bool comparisonResultOnNULL = 4 [default = false];
    if (has_comparisonresultonnull()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void requiredDoubleCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const requiredDoubleCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const requiredDoubleCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void requiredDoubleCondition::MergeFrom(const requiredDoubleCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_comparison()) {
      set_comparison(from.comparison());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_comparisonresultonnull()) {
      set_comparisonresultonnull(from.comparisonresultonnull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void requiredDoubleCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requiredDoubleCondition::CopyFrom(const requiredDoubleCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requiredDoubleCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void requiredDoubleCondition::Swap(requiredDoubleCondition* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(comparison_, other->comparison_);
    std::swap(value_, other->value_);
    std::swap(comparisonresultonnull_, other->comparisonresultonnull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata requiredDoubleCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = requiredDoubleCondition_descriptor_;
  metadata.reflection = requiredDoubleCondition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
